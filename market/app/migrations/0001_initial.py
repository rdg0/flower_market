# Generated by Django 4.2.1 on 2023-05-13 22:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('seller', 'Продавец'), ('buyer', 'Покупатель')], help_text='Выберите пользовательскую роль', max_length=32, verbose_name='Пользовательская роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('buyer', models.ForeignKey(help_text='Покупатель', on_delete=django.db.models.deletion.CASCADE, related_name='buyers', to=settings.AUTH_USER_MODEL, verbose_name='Покупатель')),
                ('seller', models.ForeignKey(help_text='Продавец', on_delete=django.db.models.deletion.CASCADE, related_name='sellers', to=settings.AUTH_USER_MODEL, verbose_name='Продавец')),
            ],
            options={
                'verbose_name': 'Сделка',
                'verbose_name_plural': 'Сделки',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(db_index=True, help_text='Обязательное поле. Введите вид цветка', max_length=256, verbose_name='Сорт цветка')),
                ('tone', models.CharField(choices=[('red', 'красный'), ('green', 'зеленный'), ('blue', 'синий')], help_text='Выберите оттенок цветка', max_length=32, verbose_name='Оттенок')),
                ('price', models.IntegerField(help_text='Укажите цену лота', verbose_name='Цена')),
                ('quantity', models.IntegerField(help_text='Укажите количество лота', verbose_name='Количество')),
                ('is_published', models.BooleanField(help_text='Выберете статус публикации лота', verbose_name='Опубликован ли лот')),
                ('seller', models.ForeignKey(help_text='Продавец лота', on_delete=django.db.models.deletion.CASCADE, related_name='lots', to=settings.AUTH_USER_MODEL, verbose_name='Продавец лота')),
            ],
            options={
                'verbose_name': 'Лот продавца',
                'verbose_name_plural': 'Лоты продавцов',
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='ReviewSeller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Введите текст отзыва.', verbose_name='Текст отзыва')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('author', models.ForeignKey(help_text='Отзыв покупателя', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Отзыв покупателя')),
                ('seller', models.ForeignKey(help_text='Отзыв на продавца', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Отзыв на продавца')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewLot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Введите текст отзыва.', verbose_name='Текст отзыва')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('author', models.ForeignKey(help_text='Отзыв покупателя', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Отзыв покупателя')),
                ('lot', models.ForeignKey(help_text='Отзыв к лоту', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='app.lot', verbose_name='Отзыв к лоту')),
            ],
        ),
        migrations.CreateModel(
            name='DealItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, help_text='Введите количество', verbose_name='Количество товара')),
                ('deal', models.ForeignKey(help_text='Сделка', on_delete=django.db.models.deletion.CASCADE, related_name='deals', to='app.deal', verbose_name='Сделка')),
                ('lot', models.ForeignKey(help_text='Лот', on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='app.lot', verbose_name='Лот')),
            ],
        ),
    ]
